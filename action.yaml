name: Run tests using Marathon Cloud
description: Run tests using Marathon Cloud
inputs:
  version:
    description: marathon-cloud cli version to use
    required: true 
  apiKey:
    description: "API key for authenticating with Marathon Cloud"
    required: true
  application:
    description: "Application binary path, e.g. apk file for Android or zip file of iOS Application"
    required: true
  testApplication:
    description: "Test application binary path, e.g. apk file for Android or zip file of iOS Test Runner app"
    required: true
  platform:
    description: "Testing platform. Android or iOS only"
    required: true
  osVersion:
    description: "Android or iOS OS version. For Android one of [10, 11, 12, 13, 14]. For iOS one of [16.4, 17.2]"
    required: false
  systemImage:
    description: "OS-specific system image. For Android one of [default,google_apis]. For iOS only [default]"
  link:
    description: "Link to commit"
    required: false
  output:
    description: "Output folder for test run results"
    required: false
  outputGlob:
    description: "Only files matching this glob will be downloaded, i.e. 'tests/**' will download only the JUnit xml files"
    required: false
  isolated:
    description: "Run each test in isolation, i.e. isolated batching"
    required: false
  flavor:
    description: "Type of tests to run. Default: [native]. Possible values: [native, js-test-appium, python-robotframework-appium]"
    required: false
  filterFile:
    description: "File containing test filters in YAML format, following the schema described at https://docs.marathonlabs.io/runner/configuration/filtering/#filtering-logic. For iOS see also https://docs.marathonlabs.io/runner/next/ios#test-plans."
    required: false
  wait:
    description: "Wait for test run to finish if true, exits after triggering a run if false. Defaults to true"
    default: "true"
    required: false
  name:
    description: "Name for run, for example it could be description of commit"
    required: false
  device:
    description: "Device type. For Android one of [phone, tv, watch]. For iOS one of [iPhone-14, iPhone-15]"
    required: false
  xcodeVersion:
    description: "Xcode version. Only for iOS. Possible values: [14.3.1, 15.2]"
    required: false
  xctestplanFilterFile:
    description: "Test filters supplied as .xctestplan file"
    required: false
  xctestplanTargetName:
    description: "Target name to use for test filtering in .xctestplan"
    required: false
  xctestrunEnv:
    description: "xctestrun environment variables, format: 'VAR1=VALUE1,VAR2=VALUE2'"
    required: false
  xctestrunTestEnv:
    description: "xctestrun testing environment variables, format: 'VAR1=VALUE1,VAR2=VALUE2'"
    required: false
  ignoreTestFailures:
    description: "When tests fail and this option is true then GHA will exit with code 0. By default, GHA will exit with code 1 in case of test failures and 0 for passing tests [possible values: true, false]"
    required: false
branding:
  color: purple
  icon: play-circle
runs:
  using: composite
  steps:
    - name: Setup marathon-cloud
      uses: MarathonLabs/setup-marathon-cloud@2.0.1
      with:
        version: ${{ inputs.version }}
    - name: Run tests using marathon-cloud
      uses: MarathonLabs/action-invoke@1.0.6
      with:
        apiKey: ${{ inputs.apiKey }}
        application: ${{ inputs.application }}
        testApplication: ${{ inputs.testApplication }}
        platform: ${{ inputs.platform }}
        osVersion: ${{ inputs.osVersion }}
        systemImage: ${{ inputs.systemImage }}
        link: ${{ inputs.link }}
        output: ${{ inputs.output }}
        outputGlob: ${{ inputs.outputGlob }}
        isolated: ${{ inputs.isolated }}
        flavor: ${{ inputs.flavor }}
        filterFile: ${{ inputs.filterFile }}
        wait: ${{ inputs.wait }}
        name: ${{ inputs.name }}
        device: ${{ inputs.device }}
        xcodeVersion: ${{ inputs.xcodeVersion }}
        xctestplanFilterFile: ${{ inputs.xctestplanFilterFile }}
        xctestplanTargetName: ${{ inputs.xctestplanTargetName }}
        xctestrunEnv: ${{ inputs.xctestrunEnv }}
        xctestrunTestEnv: ${{ inputs.xctestrunTestEnv }}
        ignoreTestFailures: ${{ inputs.ignoreTestFailures }}
